#!/usr/bin/env node

/**
 * Module dependencies.
 */

//RUN 1 TIME
/*
var model = require('../models/model');
model.createCook({ court_id: 1, user_name: 'cook01', password: '123456' });

model.createVendor({
    id: 1,
    full_name: "Nguyễn Luân",
    court_name: "Luân's Court",
    gender: 'male',
    birthday: '2000-06-01',
    email: 'luanml@gmail.com',
    phone_number: '0123456789',
    user_name: 'luan.nguyen',
    password: '654321'
});
*/
// var model = require('../models/model');
// model.createManager({
//     user_name: 'admin',
//     password: 'admin'
// });

/*var model = require('../models/model');
model.createScreen({
    user_name: 'screen1',
    password: '123456'
});
*/
/*var model = require('../models/model');
model.createCashier({
    user_name: 'cashier1',
    password: '123456'
});*/
// var model = require('../models/model');
// for (let index = 0; index < 10; index++) {
//     var uname = "long" + index;
//     model.createVendor(
//         {
//             user_name: uname,
//             court_name: 'ahihi'+index,
//             password: 'aaaaaa'+index,
//             full_name: uname,
//             birthday: "0-0-0", 
//             password: "xnxx.com"
//         }
//     )
// }

var app = require('../app');
var debug = require('debug')('sfcs:server');
var http = require('http');
const { allowedNodeEnvironmentFlags } = require('process');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}